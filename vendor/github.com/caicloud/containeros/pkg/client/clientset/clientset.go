/*
Copyright 2021 bytedance authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package clientset

import (
	"fmt"

	authv1alpha1 "github.com/caicloud/containeros/pkg/client/clientset/typed/auth/v1alpha1"
	cargov1alpha1 "github.com/caicloud/containeros/pkg/client/clientset/typed/cargo/v1alpha1"
	loggingv1alpha1 "github.com/caicloud/containeros/pkg/client/clientset/typed/logging/v1alpha1"
	monitoringv1alpha1 "github.com/caicloud/containeros/pkg/client/clientset/typed/monitoring/v1alpha1"
	networkingv1beta1 "github.com/caicloud/containeros/pkg/client/clientset/typed/networking/v1beta1"
	resourcev1alpha1 "github.com/caicloud/containeros/pkg/client/clientset/typed/resource/v1alpha1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AuthV1alpha1() authv1alpha1.AuthV1alpha1Interface
	CargoV1alpha1() cargov1alpha1.CargoV1alpha1Interface
	LoggingV1alpha1() loggingv1alpha1.LoggingV1alpha1Interface
	MonitoringV1alpha1() monitoringv1alpha1.MonitoringV1alpha1Interface
	NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	authV1alpha1       *authv1alpha1.AuthV1alpha1Client
	cargoV1alpha1      *cargov1alpha1.CargoV1alpha1Client
	loggingV1alpha1    *loggingv1alpha1.LoggingV1alpha1Client
	monitoringV1alpha1 *monitoringv1alpha1.MonitoringV1alpha1Client
	networkingV1beta1  *networkingv1beta1.NetworkingV1beta1Client
	resourceV1alpha1   *resourcev1alpha1.ResourceV1alpha1Client
}

// AuthV1alpha1 retrieves the AuthV1alpha1Client
func (c *Clientset) AuthV1alpha1() authv1alpha1.AuthV1alpha1Interface {
	return c.authV1alpha1
}

// CargoV1alpha1 retrieves the CargoV1alpha1Client
func (c *Clientset) CargoV1alpha1() cargov1alpha1.CargoV1alpha1Interface {
	return c.cargoV1alpha1
}

// LoggingV1alpha1 retrieves the LoggingV1alpha1Client
func (c *Clientset) LoggingV1alpha1() loggingv1alpha1.LoggingV1alpha1Interface {
	return c.loggingV1alpha1
}

// MonitoringV1alpha1 retrieves the MonitoringV1alpha1Client
func (c *Clientset) MonitoringV1alpha1() monitoringv1alpha1.MonitoringV1alpha1Interface {
	return c.monitoringV1alpha1
}

// NetworkingV1beta1 retrieves the NetworkingV1beta1Client
func (c *Clientset) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	return c.networkingV1beta1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.authV1alpha1, err = authv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cargoV1alpha1, err = cargov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loggingV1alpha1, err = loggingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.monitoringV1alpha1, err = monitoringv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkingV1beta1, err = networkingv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.authV1alpha1 = authv1alpha1.NewForConfigOrDie(c)
	cs.cargoV1alpha1 = cargov1alpha1.NewForConfigOrDie(c)
	cs.loggingV1alpha1 = loggingv1alpha1.NewForConfigOrDie(c)
	cs.monitoringV1alpha1 = monitoringv1alpha1.NewForConfigOrDie(c)
	cs.networkingV1beta1 = networkingv1beta1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.authV1alpha1 = authv1alpha1.New(c)
	cs.cargoV1alpha1 = cargov1alpha1.New(c)
	cs.loggingV1alpha1 = loggingv1alpha1.New(c)
	cs.monitoringV1alpha1 = monitoringv1alpha1.New(c)
	cs.networkingV1beta1 = networkingv1beta1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
